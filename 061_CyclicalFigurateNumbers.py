# 061 Cyclical Figurate Numbers
#
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are
# generated by the following formula:
#
# Triangle   - P3n = n(n + 1)/2
# Square     - P4n = n^2
# Pentagonal - P5n = n(3n -1)/2
# Hexagonal  - P6n = n(2n -1)
# Heptagonal - P7n = n(5n - 3)/2
# Octagonal  - P8n = n(3n-2)
# 
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
# 1 . The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last
# number wth the first).
# 2. Each polygonal type: triangle (P3,127 = 8128), square (P4,91 = 8281), and pentagonal (P5,44 = 2882), is represented by a
# different number in the set.
# 3. This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal,
# hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

import numpy as np
from itertools import combinations, permutations


# Triangle   - P3n = n(n + 1)/2
def TriangleNumberGen(s,f):
    res = []
    i = 0
    while True:
        nxt = int((i*(i+1))/2)
        if nxt >= s and nxt <= f:
            res.append(nxt)
            
        if nxt > f:
            return res
        i+=1

#print("Triangle ",TriangleNumberGen(10,20))

# Square     - P4n = n^2
def SquareNumberGen(s,f):
    res = []
    i = 0
    while True:
        nxt = int(i*i)
        if nxt >= s and nxt <= f:
            res.append(nxt)
            
        if nxt > f:
            return res
        i+=1
#print("Square ",SquareNumberGen(1,10))

# Pentagonal - P5n = n(3n -1)/2
def PentagonalNumberGen(s,f):
    res = []
    i = 0
    while True:
        nxt = int((i*((3*i)-1))/2)
        if nxt >= s and nxt <= f:
            res.append(nxt)
            
        if nxt > f:
            return res
        i+=1
#print("Pentagonal ", PentagonalNumberGen(1,20))

# Hexagonal  - P6n = n(2n -1)
def HexagonalNumberGen(s,f):
    res = []
    i = 0
    while True:
        nxt = int((i*((2*i)-1))/2)
        if nxt >= s and nxt <= f:
            res.append(nxt)
            
        if nxt > f:
            return res
        i+=1
#print("Hexagonal ",HexagonalNumberGen(1,20))

# Heptagonal - P7n = n(5n - 3)/2
def HeptagonalNumberGen(s,f):
    res = []
    i = 0
    while True:
        nxt = int((i*((5*i)-3))/2)
        if nxt >= s and nxt <= f:
            res.append(nxt)
            
        if nxt > f:
            return res
        i+=1
#print("Heptagonal ", HeptagonalNumberGen(1,20))

# Octagonal  - P8n = n(3n-2)
def OctagonalNumberGen(s,f):
    res = []
    i = 0
    while True:
        nxt = int(i*((3*i)-2))
        if nxt >= s and nxt <= f:
            res.append(nxt)
            
        if nxt > f:
            return res
        i+=1
#print("Octagonal ", OctagonalNumberGen(1,20))

def IsCyclic(arr):

    perm = list(permutations(arr, len(arr)))


    for j in range(len(perm)):
        res = True
        if str(perm[j][0])[:2] != str(perm[j][len(arr)-1])[2:]:
            res = False
        else:
             for i in range(len(arr)-1):
                a = str(perm[j][i])[2:] 
                b = str(perm[j][i+1])[:2]
                if a != b:
                    res = False
        
        if res:
            return True
        
    return False

def isConsecutive(arr):
    perm = list(permutations(arr, len(arr)))


    for j in range(len(perm)):
        res = True
       
        for i in range(len(arr)-1):
            a = str(perm[j][i])[2:] 
            b = str(perm[j][i+1])[:2]
            if a != b:
                res = False
        
        if res:
            return True
        
    return False
#print(IsConsecutive4Digit([8128,2882, 8281]))

# First I try to reproduce the set of three cyclic 4-digit number
def ThreeCyclic():
    # gener
    P3 = TriangleNumberGen(1000,9999)
    P4 = SquareNumberGen(1000,9999)
    P5 = PentagonalNumberGen(1000,9999)
    P6 = HexagonalNumberGen(1000,9999)
    P7 = HeptagonalNumberGen(1000,9999)
    P8 = OctagonalNumberGen(1000,9999)
    

    for iP3 in range(0, len(P3)):

        for iP4 in range(0, len(P4)):
            if not isConsecutive([P3[iP3], P4[iP4]]):
                continue

            for iP5 in range(0, len(P5)):
                if not isConsecutive([P3[iP3], P4[iP4], P5[iP5]]):
                    continue

                for iP6 in range(0, len(P6)):
                    if not isConsecutive([P3[iP3], P4[iP4], P5[iP5], P6[iP6]]):
                        continue
                    
                    for iP7 in range(0, len(P7)):
                        if not isConsecutive([P3[iP3], P4[iP4], P5[iP5], P6[iP6], P7[iP7]]):
                            continue
                    
                        for iP8 in range(0, len(P8)):
                            
                            if IsCyclic([P3[iP3], P4[iP4], P5[iP5], P6[iP6], P7[iP7], P8[iP8]]):
                                print([P3[iP3], P4[iP4], P5[iP5], P6[iP6], P7[iP7], P8[iP8]])
                                print(sum([P3[iP3], P4[iP4], P5[iP5], P6[iP6], P7[iP7], P8[iP8]]))
                            
                    
                
                    

ThreeCyclic()